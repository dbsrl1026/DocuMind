spring.application.name=service-auth

server.port=8611

spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# ---- ????? ?? ??
# ?? ?? ???(whitelabel) ?? ?? (default=true)
server.error.whitelabel.enabled=true
# ?? ??? stacktrace ?? ?? (default=always, never, on_trace_param)  ---> ?? ??? ? never
server.error.include-stacktrace=always
# ?? ??? exception ?? ?? (default=true)  ---> ?? ??? ? false
server.error.include-exception=true
# ??? ?? error ??? ??(deprecated)
# server.error.path=/error

spring.datasource.url=jdbc:postgresql://localhost:5432/gloud
spring.datasource.username=it
spring.datasource.password=0000
spring.datasource.driver-class-name=org.postgresql.Driver


# DDL ?? ?? ?? (none, validate, update, create, create-drop)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# SQL ?? ??
spring.jpa.show-sql=true
# SQL ?? ???
spring.jpa.format-sql=true
#SQL ??? ???? ??
logging.level.org.hibernate.orm.jdbc.bind=TRACE


#application-oauth.properties ? ??? ?? ?? ?? ??
#spring.profiles.include=oauth
spring.security.oauth2.client.registration.google.client-id=132153140522-46cvv4nbdb8gi5soug53972g2vaa9hgn.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=1SHdnEEJChFeerfO8lRV6rBJ
spring.security.oauth2.client.registration.google.scope=profile,email

# {baseUrl} : https://localhost:8089
# Security OAuth2 redirect-uri  : /oauth2/code/{registrationId}**???
# Security OAuth2 loginform-uri : /oauth2/authorization/{registrationId}**???
# reflesh-token ??? ??? ? : https://myaccount.google.com/connections ?? ?? ? ? ??? ?? ? ???
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&prompt=consent&include_granted_scopes=false
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/userinfo/v2/me
spring.security.oauth2.client.provider.google.user-name-attribute=email


spring.security.oauth2.client.registration.naver.client-id=dMAROqYn9flXYHcH48Nv
spring.security.oauth2.client.registration.naver.client-secret=VqO00l8mU6
spring.security.oauth2.client.registration.naver.scope=profile,email
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/naver
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

#springdoc.api-docs.enabled=true
#springdoc.api-docs.path=/api-docs
#springdoc.swagger-ui.enabled=true
#springdoc.swagger-ui.path=/api-docs.html
##springdoc.swagger-ui.path=/swagger-ui.html
#springdoc.packages-to-scan=com.boot.first.rest, com.boot.first.jwt
#springdoc.paths-to-match=/api/v1/**


spring.jwt.secret=Ri8yh7DbATRiJq/YLgUdSivBn9lfyDnP01Mc5hWemT8=
spring.jwt.expiration_time.access=30
spring.jwt.expiration_time.refresh=14400

#spring.cors.path=